{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Jonadest\\\\Documents\\\\Web Dev\\\\Projects\\\\React Projects\\\\new-time\\\\src\\\\Components\\\\Time.jsx\",\n  _s = $RefreshSig$();\n/* \r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Time = () => {\r\n  const [time, setTime] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setTime(new Date());\r\n    }, 1000); // 1000 milliseconds (1 second)\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  const localTime = time.toLocaleTimeString(undefined, {\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit',\r\n  });\r\n\r\n  const getFormattedTime = (timeZone) => {\r\n    return time.toLocaleTimeString(undefined, {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      timeZone,\r\n    });\r\n  };\r\n\r\n  const lagosTime = getFormattedTime('Africa/Lagos');\r\n  const newYorkTime = getFormattedTime('America/New_York');\r\n  const chinaTime = getFormattedTime('Asia/Shanghai');\r\n  const parisTime = getFormattedTime('Europe/Paris');\r\n  const pakistanTime = getFormattedTime('Asia/Karachi');\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <div className=\"local-time\">\r\n        <p>Local Time</p>\r\n        <h2>{localTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      <div className=\"lag\">\r\n        <p>Lagos</p>\r\n        <h2>{lagosTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      <div className=\"nyc\">\r\n        <p>New York</p>\r\n        <h2>{newYorkTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      <div className=\"china\">\r\n        <p>China</p>\r\n        <h2>{chinaTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      <div className=\"paris\">\r\n        <p>Paris</p>\r\n        <h2>{parisTime}</h2>\r\n      </div>\r\n      <div className=\"nZealand\">\r\n        <p>Paskistan</p>\r\n        <h2>{pakistanTime}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Time;\r\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport timeZone from \"./timeZone\"; // Import the timeZone array\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Time = () => {\n  _s();\n  const [time, setTime] = useState(new Date());\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setTime(new Date());\n    }, 1000); // 1000 milliseconds (1 second)\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  const localTime = time.toLocaleTimeString(undefined, {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\"\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clock\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"local-time\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Local Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: localTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), timeZone.map((zone, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: zone.city,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: zone.city\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: getFormattedTime(time, zone.zone)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n// Define a function to format time based on the time zone\n_s(Time, \"I0+7QaEsXHXB0XO5JypI3yBHjPI=\");\n_c = Time;\nconst getFormattedTime = (time, timeZone) => {\n  return time.toLocaleTimeString(undefined, {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    timeZone: timeZone\n  });\n};\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["React","useState","useEffect","timeZone","jsxDEV","_jsxDEV","Time","_s","time","setTime","Date","intervalId","setInterval","clearInterval","localTime","toLocaleTimeString","undefined","hour","minute","second","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","zone","index","city","getFormattedTime","_c","$RefreshReg$"],"sources":["D:/Users/Jonadest/Documents/Web Dev/Projects/React Projects/new-time/src/Components/Time.jsx"],"sourcesContent":["/* \r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Time = () => {\r\n  const [time, setTime] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setTime(new Date());\r\n    }, 1000); // 1000 milliseconds (1 second)\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  const localTime = time.toLocaleTimeString(undefined, {\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit',\r\n  });\r\n\r\n  const getFormattedTime = (timeZone) => {\r\n    return time.toLocaleTimeString(undefined, {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      timeZone,\r\n    });\r\n  };\r\n\r\n  const lagosTime = getFormattedTime('Africa/Lagos');\r\n  const newYorkTime = getFormattedTime('America/New_York');\r\n  const chinaTime = getFormattedTime('Asia/Shanghai');\r\n  const parisTime = getFormattedTime('Europe/Paris');\r\n  const pakistanTime = getFormattedTime('Asia/Karachi');\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <div className=\"local-time\">\r\n        <p>Local Time</p>\r\n        <h2>{localTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      <div className=\"lag\">\r\n        <p>Lagos</p>\r\n        <h2>{lagosTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      <div className=\"nyc\">\r\n        <p>New York</p>\r\n        <h2>{newYorkTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      <div className=\"china\">\r\n        <p>China</p>\r\n        <h2>{chinaTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      <div className=\"paris\">\r\n        <p>Paris</p>\r\n        <h2>{parisTime}</h2>\r\n      </div>\r\n      <div className=\"nZealand\">\r\n        <p>Paskistan</p>\r\n        <h2>{pakistanTime}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Time;\r\n */\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport timeZone from \"./timeZone\"; // Import the timeZone array\r\n\r\nconst Time = () => {\r\n  const [time, setTime] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setTime(new Date());\r\n    }, 1000); // 1000 milliseconds (1 second)\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  const localTime = time.toLocaleTimeString(undefined, {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n  });\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <div className=\"local-time\">\r\n        <p>Local Time</p>\r\n        <h2>{localTime}</h2>\r\n      </div>\r\n      <br />\r\n      <hr />\r\n      {timeZone.map((zone, index) => (\r\n        <div key={index} className={zone.city}>\r\n          <p>{zone.city}</p>\r\n          <h2>{getFormattedTime(time, zone.zone)}</h2>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Define a function to format time based on the time zone\r\nconst getFormattedTime = (time, timeZone) => {\r\n  return time.toLocaleTimeString(undefined, {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    timeZone: timeZone,\r\n  });\r\n};\r\n\r\nexport default Time;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}